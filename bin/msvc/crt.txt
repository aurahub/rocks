如果应用程序使用多个 CRT 版本，存在哪些问题？
每个可执行映像（EXE 或 DLL）都可以有自己的静态链接 CRT，也可以动态链接到 CRT。特定映像静态包含或动态加载的 CRT 版本取决于其构建的工具和库的版本。单个进程可以加载多个 EXE 和 DLL 映像，每个映像都有自己的 CRT。每个 CRT 可能使用不同的分配器，可能具有不同的内部结构布局，并可能使用不同的存储安排。这意味着通过 DLL 边界传递的已分配内存、CRT 资源或类可能会导致内存管理、内部静态使用或布局解释出现问题。例如，如果一个类在一个 DLL 中分配，但传递给另一个 DLL 并由另一个类删除，则使用哪个 CRT 交易定位器？造成的错误范围从细微到立即致命，因此强烈建议不要直接转移此类资源。

您可以使用应用程序二进制接口 （ABI） 技术来避免这些问题，因为它们设计为稳定且可版本化。设计 DLL 导出接口以按值传递信息，或处理由调用方传递的内存，而不是在本地分配并返回给调用方。使用封送处理技术在可执行映像之间复制结构化数据。封装本地资源，并且只允许通过向客户端公开的句柄或函数进行操作。

如果进程中的所有映像都使用相同的动态加载版本的 CRT，也可以避免其中一些问题。若要确保所有组件都使用相同的 CRT DLL 版本，请使用/MD选项生成它们，并使用相同的编译器工具集和属性设置。

如果程序跨 DLL 边界传递某些 CRT 资源，请小心。即使使用同一版本的 CRT，文件句柄、区域设置和环境变量等资源也可能导致问题。有关所涉及的问题以及如何解决这些问题的信息，请参阅跨 DLL 边界传递 CRT 对象的潜在错误。

